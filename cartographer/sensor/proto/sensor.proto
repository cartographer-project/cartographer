// Copyright 2016 The Cartographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package cartographer.sensor.proto;

option java_outer_classname = "Sensor";

import "cartographer/transform/proto/transform.proto";

// Collection of 3D 'points'.
message PointCloud {
  // Points as repeated floats for efficiency. All fields have the same size.
  repeated float x = 3 [packed = true];
  repeated float y = 4 [packed = true];
  repeated float z = 5 [packed = true];
}

// Compressed variant of PointCloud.
message CompressedPointCloud {
  optional int32 num_points = 1;
  repeated int32 point_data = 3 [packed = true];
}

// Linearized matrix representation in row major format.
// E.g. the  2x3 matrix:
//   | 1, 2, 3 |
//   | 4, 5, 6 |
// would be represented as
// {
//   rows: 2;
//   cols: 2;
//   data: [1, 2, 3, 4, 5, 6]
// }
message Matrix {
  optional int32 rows = 1;
  optional int32 cols = 2;
  repeated double data = 3;
}

// Proto representation of ::cartographer::sensor::RangeData
message RangeData {
  optional transform.proto.Vector3f origin = 1;
  optional PointCloud point_cloud = 2;
  optional PointCloud missing_echo_point_cloud = 3;
}
